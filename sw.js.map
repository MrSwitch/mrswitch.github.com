{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/indexdb.js","src/sw.js"],"names":[],"mappingszfile":"sw.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// indexStorage\n// This wraps an interface around IndexDB to create an object store\n\n// Create an instance of the db\n// The Cache name is optional, it will allow us to group various datasets (the default is __tricks__)\n\nclass DB {\n\tconstructor (name, version, schema) {\n    // Define the schema to use in the connection\n\t\tthis.db_name = name || '__tricks__';\n\t\tif (typeof version === 'object') {\n\t\t\tthis.version = 1;\n\t\t\tthis.schema = version;\n\t\t}\n\t\telse {\n\t\t\tthis.version = version || 1;\n\t\t\tthis.schema = schema;\n\t\t}\n\t\tthis.table_name = '__tricks__';\n\n    // Return a function\n\t\treturn Object.assign(this.scope.bind(this), this);\n\t}\n\n\tscope (name) {\n    // Create a new store instance\n\t\tconst inst = Object.create(this);\n\t\tinst.table_name = name;\n\t\treturn inst;\n\t}\n\n\topen(mode) {\n\t\treturn new Promise((accept, reject) => {\n\t\t\tconst db = self.indexedDB.open(this.db_name, this.version);\n\t\t\tdb.onsuccess = event => {\n\t\t\t\taccept(event.target.result);\n\t\t\t};\n\t\t\tdb.onerror = reject;\n\t\t\tdb.onupgradeneeded = event => {\n\t\t\t\tconst db = event.target.result;\n        // this should probably do something;\n\t\t\t\tfor (const x in this.schema) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(x)) {\n\t\t\t\t\t\tdb.createObjectStore(x, this.schema[x]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})\n    .then(db => {\n\n      // Does the store requested exist?\n      // if (!db.objectStoreNames.contains(this.table_name)) {\n      //   db.transaction('versionchange').createObjectStore(this.table_name, this.schema[this.table_name]);\n      // }\n\n      // The DB connection has been established\n      // Lets create a connection to it\n\tconst transaction = db.transaction([this.table_name], mode);\n\n      // Return the API for the Object Store\n\treturn transaction.objectStore(this.table_name);\n});\n\t}\n\n\tget (key) {\n\n    // We've got all the information to make a request to IndexDB\n\t\treturn new Promise((accept, reject) => {\n\t\t\tthis.open().then(objectStore => {\n          // Find items in this table by Key\n\t\t\t\tconst request = objectStore.get(key);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\taccept(event.target.result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tall () {\n\n    // We've got all the information to make a request to IndexDB\n\t\treturn new Promise((accept, reject) => {\n\t\t\tthis.open().then(objectStore => {\n          // Find items in this table by Key\n\t\t\t\tconst request = objectStore.openCursor();\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\n\t\t\t\tconst a = [];\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\ta.push(cursor.value);\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\taccept(a);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tput (key, data) {\n\n\t\treturn new Promise((accept, reject) => {\n\n      // Allow data as a thing on its own.\n\t\t\tif (typeof key === 'object') {\n\t\t\t\tdata = key;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdata.key = key;\n\t\t\t}\n\n      // Open up a connection to indexdb\n\t\t\tthis.open('readwrite').then(objectStore => {\n\t\t\t\tconst request = objectStore.put(data);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\taccept(event.target.result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\t\t\t})\n      .catch(reject);\n\n\t\t});\n\n\t}\n}\n\nmodule.exports = DB;\n","// Service Worker\n// Caches pages visited by agent for viewing offline\n\nconst CACHE_NAME = 'adodson_sw';\nconst VERSION = 1;\n\nconst DB = require('./indexdb');\nconst db = new DB('adodson_sw', VERSION, {\n\tfalloverStore: {\n\t\tautoIncrement: true\n\t}\n});\n\nconst falloverStore = db('falloverStore');\n\nself.addEventListener('install', event => {\n\t// Perform install steps\n\tevent.waitUntil(\n\t\tcaches.open(CACHE_NAME).then(() => {\n\t\t\t// Opened cache\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tconst request = event.request;\n\tevent.respondWith(fetch(event.request)\n\t.then(response => {\n\t\t\t// Check if we received a valid response\n\t\tif (!response || response.status !== 200 || response.type !== 'basic') {\n\t\t\treturn response || caches.match(event.request);\n\t\t}\n\n\t\tconst responseToCache = response.clone();\n\n\t\tcaches.open(CACHE_NAME).then(cache => {\n\t\t\tcache.put(event.request, responseToCache);\n\t\t});\n\n\t\treturn response;\n\t},\n\t() =>\n\t\t// return the cached version\n\t\tcaches.match(event.request).then(resp => {\n\n\t\t\t// Fallover\n\t\t\tif (resp) {\n\t\t\t\treturn resp;\n\t\t\t}\n\n\t\t\t// Does this have a fallover?\n\t\t\treturn falloverStore.all().then(fallover => {\n\n\t\t\t\tconst match = fallover.filter(item => (\n\t\t\t\t\t(!item.mode || item.mode === request.mode)\n\t\t\t\t\t&& (!item.url || request.url.match(item.url))\n\t\t\t\t))[0];\n\n\t\t\t\tif (match) {\n\t\t\t\t\treturn caches.match(new Request(match.fallover));\n\t\t\t\t}\n\n\t\t\t\treturn resp;\n\t\t\t});\n\t\t})\n\t));\n});\n\nself.addEventListener('message', event => {\n\n\tconst data = event.data;\n\n\t// Open cache for actions\n\tcaches.open(CACHE_NAME).then(cache => {\n\t\tswitch (data.type) {\n\n\t\t\tcase 'fallover': {\n\t\t\t\t// Has this already been added?\n\t\t\t\tfalloverStore.all().then(fallover => {\n\t\t\t\t\tconst match = fallover.filter(item => item.mode === data.mode && item.url === data.url)[0];\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// does this need\n\t\t\t\t\t\tif (match.fallover === data.fallover) {\n\t\t\t\t\t\t\t// nothing to do\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst frequest = new Request(data.fallover, {mode: 'no-cors'});\n\n\t\t\t\t\tfetch(frequest).then(response => {\n\t\t\t\t\t\t// Just update the existing record\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tmatch.fallover = data.fallover;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfalloverStore.put(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn cache.put(data.fallover, response);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'add': {\n\t\t\t\tconst request = new Request(data.url, {mode: 'no-cors'});\n\t\t\t\treturn fetch(request).then(response => cache.put(data.url, response));\n\t\t\t}\n\t\t}\n\t});\n});\n\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}