{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/indexdb.js","src/sw.js"],"names":[],"mappingspfile":"sw.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// indexStorage\n// This wraps an interface around IndexDB to create an object store\n\n// Create an instance of the db\n// The Cache name is optional, it will allow us to group various datasets (the default is __tricks__)\n\nclass DB {\n\tconstructor (name, version, schema) {\n\n\t\t// Define the schema to use in the connection\n\t\tthis.db_name = name || '__tricks__';\n\t\tif (typeof version === 'object') {\n\t\t\tthis.version = 1;\n\t\t\tthis.schema = version;\n\t\t}\n\t\telse {\n\t\t\tthis.version = version || 1;\n\t\t\tthis.schema = schema;\n\t\t}\n\t\tthis.table_name = '__tricks__';\n\n\t\t// Return a function\n\t\treturn Object.assign(this.scope.bind(this), this);\n\t}\n\n\tscope (name) {\n\t\t// Create a new store instance\n\t\tconst inst = Object.create(this);\n\t\tinst.table_name = name;\n\t\treturn inst;\n\t}\n\n\topen(mode) {\n\t\treturn new Promise((accept, reject) => {\n\t\t\tconst db = self.indexedDB.open(this.db_name, this.version);\n\t\t\tdb.onsuccess = event => {\n\t\t\t\taccept(event.target.result);\n\t\t\t};\n\t\t\tdb.onerror = reject;\n\t\t\tdb.onupgradeneeded = event => {\n\t\t\t\tconst db = event.target.result;\n\n\t\t\t\t// this should probably do something;\n\t\t\t\tfor (const x in this.schema) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(x)) {\n\t\t\t\t\t\tdb.createObjectStore(x, this.schema[x]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})\n\t\t.then(db => {\n\t\t\t// The DB connection has been established\n\t\t\t// Lets create a connection to it\n\t\t\tconst transaction = db.transaction([this.table_name], mode);\n\n\t\t\t// Return the API for the Object Store\n\t\t\treturn transaction.objectStore(this.table_name);\n\t\t});\n\t}\n\n\tget (key) {\n\n\t\t// We've got all the information to make a request to IndexDB\n\t\treturn new Promise((accept, reject) => {\n\t\t\tthis.open().then(objectStore => {\n\t\t\t\t// Find items in this table by Key\n\t\t\t\tconst request = objectStore.get(key);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\taccept(event.target.result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tall () {\n\n\t\t// We've got all the information to make a request to IndexDB\n\t\treturn new Promise((accept, reject) => {\n\t\t\tthis.open().then(objectStore => {\n\t\t  // Find items in this table by Key\n\t\t\t\tconst request = objectStore.openCursor();\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\n\t\t\t\tconst a = [];\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\tconst cursor = event.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\ta.push(cursor.value);\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\taccept(a);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tput (key, data) {\n\n\t\treturn new Promise((accept, reject) => {\n\n\t\t\t// Allow data as a thing on its own.\n\t\t\tif (typeof key === 'object') {\n\t\t\t\tdata = key;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdata.key = key;\n\t\t\t}\n\n\t\t\t// Open up a connection to indexdb\n\t\t\tthis.open('readwrite').then(objectStore => {\n\t\t\t\tconst request = objectStore.put(data);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\taccept(event.target.result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = event => {\n\t\t\t\t\treject(event.target.result);\n\t\t\t\t};\n\t\t\t})\n\t\t\t.catch(reject);\n\n\t\t});\n\t}\n}\n\nmodule.exports = DB;\n","// Service Worker\n// Caches pages visited by agent for viewing offline\n\nconst CACHE_NAME = 'adodson_sw';\nconst VERSION = 1;\n\nconst DB = require('./indexdb');\nconst db = new DB('adodson_sw', VERSION, {\n\tfalloverStore: {\n\t\tautoIncrement: true\n\t}\n});\n\nconst falloverStore = db('falloverStore');\n\nself.addEventListener('install', event => {\n\t// Perform install steps\n\tevent.waitUntil(\n\t\tcaches.open(CACHE_NAME).then(() => {\n\t\t\t// Opened cache\n\t\t})\n\t);\n});\n\nself.addEventListener('fetch', event => {\n\tconst request = event.request;\n\n\tevent.respondWith(promiseAny([\n\t\tcaches.match(request)\n\t\t\t.then(b => {\n\t\t\t\tif (!b) throw \"Not in cache\";\n\t\t\t\tconsole.log('Cache wins', request.url);\n\t\t\t\treturn b;\n\t\t\t}),\n\t\tfetch(request)\n\t\t\t.then(b => {\n\t\t\t\tif (!b) throw \"No access via network\";\n\t\t\t\tconsole.log('network wins', request.url);\n\t\t\t\treturn b;\n\t\t\t})\n\t\t\t.then(cacheUpdate.bind(null, request))\n    ]).catch(offlineFallback.bind(null, request)));\n});\n\n\nfunction promiseAny(promises) {\n\treturn new Promise((resolve, reject) => {\n\t\t// make sure promises are all promises\n\t\tpromises = promises.map(p => Promise.resolve(p));\n\t\t// resolve this promise as soon as one resolves\n\t\tpromises.forEach(p => p.then(resolve));\n\t\t// reject if all promises reject\n\t\tpromises\n\t\t.reduce((a, b) => a.catch(() => b))\n\t\t.catch(() => reject(Error(\"All failed\")));\n\t});\n};\n\nfunction cacheUpdate(request, response) {\n\n\t// Check if we received a valid response\n\tif (!response || response.status !== 200 || response.type !== 'basic') {\n\t\treturn response;\n\t}\n\n\tconst responseToCache = response.clone();\n\n\tcaches.open(CACHE_NAME).then(cache => {\n\t\tcache.put(request, responseToCache);\n\t});\n\n\treturn response;\n}\n\nfunction offlineFallback(request) {\n\n\treturn falloverStore.all().then(fallover => {\n\n\t\tconst match = fallover.filter(item => (\n\t\t\t(!item.mode || item.mode === request.mode)\n\t\t\t&& (!item.url || request.url.match(item.url))\n\t\t))[0];\n\n\t\tif (match) {\n\t\t\treturn caches.match(new Request(match.fallover));\n\t\t}\n\n\t\treturn;\n\t});\n}\n\n\nself.addEventListener('message', event => {\n\n\tconst data = event.data;\n\n\t// Open cache for actions\n\tcaches.open(CACHE_NAME).then(cache => {\n\t\tswitch (data.type) {\n\n\t\t\tcase 'fallover': {\n\t\t\t\t// Has this already been added?\n\t\t\t\tfalloverStore.all().then(fallover => {\n\t\t\t\t\tconst match = fallover.filter(item => item.mode === data.mode && item.url === data.url)[0];\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// does this need\n\t\t\t\t\t\tif (match.fallover === data.fallover) {\n\t\t\t\t\t\t\t// nothing to do\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst frequest = new Request(data.fallover, {mode: 'no-cors'});\n\n\t\t\t\t\tfetch(frequest).then(response => {\n\t\t\t\t\t\t// Just update the existing record\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tmatch.fallover = data.fallover;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfalloverStore.put(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn cache.put(data.fallover, response);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'add': {\n\t\t\t\tconst request = new Request(data.url, {mode: 'no-cors'});\n\t\t\t\treturn fetch(request).then(response => cache.put(data.url, response));\n\t\t\t}\n\t\t}\n\t});\n});\n\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}